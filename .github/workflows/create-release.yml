---
name: Create Release

# Used by https://github.com/camunda/zeebe-engineering-processes/blob/main/src/main/resources/release/zeebe-process-test-release.bpmn
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'releaseVersion: e.g. MAJOR.MINOR.PATCH[-ALPHAn]'
        type: string
        required: true
      minorVersion:
        description: 'minorVersion: just the MAJOR.MINOR part of the releaseVersion'
        type: string
        required: true
      releaseType:
        description: 'releaseType: e.g. minor, alpha or patch'
        type: string
        required: true
      nextDevelopmentVersion:
        description: 'nextDevelopmentVersion: e.g. 8.X.X-SNAPSHOT'
        type: string
        required: true
      isLatest:
        description: 'isLatest: updates the `latest` docker tag'
        type: boolean
        required: false
        default: false
      releaseBranch:
        description: 'releaseBranch: defaults to `release-$releaseVersion` if not set'
        type: string
        required: false
        default: ''
      dryRun:
        description: 'dryRun: Whether to perform a dry release where no changes/artifacts are pushed'
        type: boolean
        required: true
        default: false

defaults:
  run:
    shell: bash

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      RELEASE_BRANCH: ${{ inputs.releaseBranch != '' && inputs.releaseBranch || format('release-{0}', inputs.releaseVersion) }}
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
      MINOR_VERSION: ${{ inputs.minorVersion }}
    steps:
      - name: Output inputs
        run: echo "${{ toJSON(github.event.inputs) }}"

      # This step generates a GitHub App token to be used in Git operations as a workaround  for
      # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
      - name: Generate GitHub token
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: MONOREPO_RELEASE_APP_ID
          github-app-id-vault-path: secret/data/products/camunda/ci/camunda
          github-app-private-key-vault-key: MONOREPO_RELEASE_APP_PRIVATE_KEY
          github-app-private-key-vault-path: secret/data/products/camunda/ci/camunda
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          # Overriding the default GITHUB_TOKEN with a GitHub App token in order to workaround
          # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
          # NOTES:
          # - This token will be used for all git operations in this job
          # - This token expires after 1 hour (https://github.com/actions/create-github-app-token?tab=readme-ov-file#create-github-app-token)
          token: ${{ steps.github-token.outputs.token }}

      - name: Setup Git user
        run: |
          git config --global user.email "github-actions[release]"
          git config --global user.name "github-actions[release]@users.noreply.github.com"

      - name: Set up Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Update Zeebe version
        run: |
          mvn -B versions:set-property -DgenerateBackupPoms=false -Dproperty=dependency.zeebe.version -DnewVersion="${RELEASE_VERSION}"
          git commit -am "ci: update Zeebe version to ${RELEASE_VERSION}"

      - name: Push changes to release branch
        if: ${{ inputs.dryRun == false }}
        run: |
          git push origin "${RELEASE_BRANCH}"

      - name: Create Git tag
        run: |
          git tag -a -m"${RELEASE_VERSION}" "${RELEASE_VERSION}"

      - name: Push Git tag
        if: ${{ inputs.dryRun == false }}
        run: |
          git push origin "${RELEASE_VERSION}"

      - name: Create new stable branch for minor
        if: ${{ inputs.releaseType == 'minor' }}
        run: |
          git checkout --branch "stable/${MINOR_VERSION}"
          git push origin "stable/${MINOR_VERSION}"

      # Same logic as in camunda/camunda
      - name: Determine if pre-release
        id: pre-release
        run: |
          shopt -s nocasematch # set matching to case insensitive
          PRE_RELEASE=false
          if [[ "${RELEASE_VERSION}" =~ ^.*-(alpha|rc|SNAPSHOT).*$ ]]; then
            PRE_RELEASE=true
          fi
          shopt -u nocasematch # reset it
          echo "result=${PRE_RELEASE}" >> $GITHUB_OUTPUT

      # This step creates a GitHub release which indirectly triggers deploy-artifact.yml
      - name: Create Github release
        uses: ncipollo/release-action@v1
        if: ${{ inputs.dryRun == false }}
        with:
          name: ${{ inputs.releaseVersion }}
          tag: ${{ inputs.releaseVersion }}
          generateReleaseNotes: true
          prerelease: ${{ steps.pre-release.outputs.result }}
          makeLatest: ${{ inputs.isLatest }}
          token: ${{ steps.github-token.outputs.token }}

  notify-if-failed:
    name: Send Slack notification on failure
    runs-on: ubuntu-latest
    needs: [create-release]
    # if it's a dry run => no slack notification (remove noise in slack due to manual testing)
    # else => send slack notification as an actual release failed
    if: ${{ failure() && inputs.dryRun == false }}
    timeout-minutes: 5
    permissions: {}  # GITHUB_TOKEN unused in this job
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/camunda/ci/github-actions SLACK_TOPMONOREPORELEASE_WEBHOOK_URL;

      - name: Send failure Slack notification
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          webhook: ${{ steps.secrets.outputs.SLACK_TOPMONOREPORELEASE_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: *Creating ZPT release ${{ inputs.releaseVersion }}* failed!\n"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check this <https://github.com/camunda/zeebe-process-test/actions/runs/${{ github.run_id }}|GHA workflow run>."
                  }
                }
              ]
            }
